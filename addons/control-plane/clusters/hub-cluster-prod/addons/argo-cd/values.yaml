configs:
  cm:
    resource.customizations: |
          "kro.run/*":
            health.lua.useOpenLibs: true
            health.lua: |
              hs = {}
              if obj.status and obj.status.conditions then
                  for i, condition in ipairs(obj.status.conditions) do
                      if condition.status == "Unknown" then
                          hs.status = "Degraded"
                          hs.message = condition.reason
                          return hs
                      elseif condition.status == "False" then
                          hs.status = "Degraded"
                          hs.message = condition.reason
                          return hs
                      elseif condition.status == "True" then
                          hs.status = "Healthy"
                          hs.message = condition.message
                          return hs
                      end
                  end
              end
              hs.status = "Progressing"
              hs.message = "Waiting for Status conditions"
              return hs
          services.k8s.aws/AdoptedResource:
            health.lua: |
              hs = {}
              if obj.status ~= nil then
                if obj.status.conditions ~= nil then
                  for i, condition in ipairs(obj.status.conditions) do
                    if condition.type == "ACK.Adopted" and condition.status == "False" then
                      hs.status = "Degraded"
                      hs.message = condition.message
                      return hs
                    end
                    if condition.type == "ACK.Adopted" and condition.status == "True" then
                      hs.status = "Healthy"
                      hs.message = condition.message
                      return hs
                    end
                  end
                end
              end
              hs.status = "Progressing"
              hs.message = "Waiting for Status conditions"
              return hs
          "*.services.k8s.aws/*":
            health.lua.useOpenLibs: true
            health.lua: |
              hs = {}
              if obj.status and obj.status.conditions then
                  for i, condition in ipairs(obj.status.conditions) do
                      if condition.status == "Unknown" then
                          hs.status = "Degraded"
                          hs.message = condition.reason
                          return hs
                      elseif condition.type == "ACK.Recoverable" and condition.status == "True" then
                          hs.status = "Degraded"
                          hs.message = condition.message
                          return hs
                      elseif condition.type == "ACK.Terminal" and condition.status == "True" then
                          hs.status = "Degraded"
                          hs.message = condition.message
                          return hs
                      elseif condition.type == "ACK.ResourceSynced" then
                          if condition.status == "True" then
                              hs.status = "Healthy"
                              hs.message = condition.message
                              return hs
                          elseif condition.status == "False" then
                              hs.status = "Progressing"
                              hs.message = condition.reason
                              return hs
                          end
                      end
                  end
              end
              hs.status = "Progressing"
              hs.message = "Waiting for Status conditions"
              return hs
  #   url: https://argocd-hub.eks.kandylis.co.uk
  #   dex.config: |
  #     logger:
  #       level: debug
  #       format: json
  #     connectors:
  #     - type: saml
  #       id: aws
  #       name: "AWS IAM Identity Center"
  #       config:
  #         # You need value of Identity Center APP SAML (IAM Identity Center sign-in URL)
  #         ssoURL: https://portal.sso.eu-west-2.amazonaws.com/saml/assertion/MjgzNzQwODAxMjI1X2lucy1mNTIwNzk5NWQ0Mjc2YWYz
  #         caData: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCakNDQWU2Z0F3SUJBZ0lFZFN3SzB6QU5CZ2txaGtpRzl3MEJBUXNGQURCRk1SWXdGQVlEVlFRRERBMWgKYldGNmIyNWhkM011WTI5dE1RMHdDd1lEVlFRTERBUkpSRUZUTVE4d0RRWURWUVFLREFaQmJXRjZiMjR4Q3pBSgpCZ05WQkFZVEFsVlRNQjRYRFRJME1UQXhPREU0TWprd09Gb1hEVEk1TVRBeE9ERTRNamt3T0Zvd1JURVdNQlFHCkExVUVBd3dOWVcxaGVtOXVZWGR6TG1OdmJURU5NQXNHQTFVRUN3d0VTVVJCVXpFUE1BMEdBMVVFQ2d3R1FXMWgKZW05dU1Rc3dDUVlEVlFRR0V3SlZVekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQgpBSjl5dDZkMG5iNjRjd1lLTGR4WjFVakhKcFQyV2Nad3lvdW9BNU9xb3UyTllMeFVLYy9IWElHSW9lLzh2dXBrCkZiaC9EL3NJUUk4QlRUMEJWZUFad1lNZ3dHNUEzVXUybXVPNldQTGVyeWhtWHI5OFprdStPNFRzaWVIWVpPTUQKWjNmaGVCVW9MbGNqc0RKQllML3NiM0ZJVmpvU3ZxSThJTzgzOTlkQml4TVRYTko1eVkzVWJxU2ZObTJrU3RvYgpyOEhjWG1LVWtZWmVLM1FEMThGU0t5RVFVWm5waGFiRERPZnVKb1VTOFV3c2h6NDJMQmowa01lMWFQbHp5VkphClluTHB5azk0Uk9JNXBlakdWRlA0bk10aTJ5aFFwSE1MVE0yTVZXM1hNRVJqbENGMVAxTWtmdkNZOTkyN0pTeVAKV0ZoZGR6cXZNOU1NTjdBaVhIUldXRThDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFuU3hFdjVuRApEdVBwUWZ3dWRZc2MvQW9rVjVpVmlBWFJJZkVlclBZK3NURTlwYW0vNG1FVnZRTHBXUnBUUjAvWVJjM2hxcGNSCnlaTWVjT1lDNktOSUFhdE5jWDRJWjJnWFE2bnhYekRpMXc1STBYM1l1UnNncmpCNlQ5TEJ1RE5lSU4vcFRFSGUKcjVnSlJtQUliN25ScEdvc25LQzhxcUFyVVZFTlNCUVlFVXhsN3Y5WHVvbWs1dkhCSkcrUlJOV1Ryalh0NHBWLwpBSURXTmpDRUlZZTlPZ2tDakJRQ2IzU2tWbUFzY2dnUUNwU1RGV3Bya3BBNmFUb0tuMHdGRHJLMXhZekN0Ly83CjRnU3lIOG1GZ2d2dzMySE1pQ1VQVzd4aUd6NEpvdmhxdXMwWWlFZGRwSFBKSnpUb3NJUWd0MFlaZzA0U1pZdlEKUkxkYXNSYkFiMDU4c0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  #         # Path to mount the secret to the dex container
  #         entityIssuer: https://argocd-hub.eks.kandylis.co.uk/api/dex/callback
  #         redirectURI:  https://argocd-hub.eks.kandylis.co.uk/api/dex/callback
  #         usernameAttr: email
  #         emailAttr: email
  #         groupsAttr: groups
  # rbac:
  #   policy.csv: |
  #       g, 96b27284-6041-705c-6382-85543eaa1f7e, role:admin
  #   scopes: '[groups, email]'
